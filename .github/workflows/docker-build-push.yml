name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    paths:
      - 'gzirysz/**/Dockerfile'

jobs:
  get-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      dockerfiles: ${{ steps.set-output.outputs.dockerfiles }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get changed/new Dockerfiles
        id: changed-dockerfiles
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.before,
              head: context.payload.after
            });
            const dockerfiles = changedFiles.data.files
              .filter(file => file.filename.includes('Dockerfile'))
              .map(file => file.filename);
            return dockerfiles;

      - name: Set output for Dockerfiles
        id: set-output
        run: |
          echo "dockerfiles=$(jq -cn --argjson dockerfiles '${{ steps.changed-dockerfiles.outputs.result }}' '{dockerfile: $dockerfiles}')" >> $GITHUB_OUTPUT

  build-push-images:
    needs: get-dockerfiles
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    strategy:
      matrix: ${{ fromJson(needs.get-dockerfiles.outputs.dockerfiles) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QUEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (part. 1)
        id: meta1
        run: |
          dirpath=$(dirname ${{ matrix.dockerfile }})
          base=$(basename $dirpath)
          version=$(basename $(dirname $dirpath))
          imgname=$(dirname $(dirname $dirpath))
          softname=$(basename $imgname)
          echo "dirpath=$dirpath" >> $GITHUB_OUTPUT
          echo "base=$base" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "imgname=$imgname" >> $GITHUB_OUTPUT
          echo "softname=$softname" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta2
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.meta1.outputs.imgname }}
            ghcr.io/${{ steps.meta1.outputs.imgname }}
          flavor: |
            suffix=${{ steps.meta1.outputs.base }},onlatest=false
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.meta1.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.meta1.outputs.version }}
            type=semver,pattern={{major}},value=v${{ steps.meta1.outputs.version }},enable=${{ !startsWith(steps.meta1.outputs.version, '0') }}
          labels: |
            org.opencontainers.image.title=${{ steps.meta1.outputs.softname }}
            org.opencontainers.image.vendor=GzIrYsz
            org.opencontainers.image.version=${{ steps.meta1.outputs.version }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.meta1.outputs.dirpath }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta2.outputs.tags }}
          labels: ${{ steps.meta2.outputs.labels }}